Class {
	#name : #BrUngroupedList,
	#superclass : #BrList,
	#category : #'Brick-List-Ungrouped-Elements'
}

{ #category : #accessing }
BrUngroupedList >> defaultListModel [
	^ BrUngroupedListModel new
]

{ #category : #'api - accessing' }
BrUngroupedList >> items [
	^ self viewModel items
]

{ #category : #'api - accessing' }
BrUngroupedList >> items: aCollectionOfValues [
	self itemsProvider: (BrSequenceableCollectionItemsProvider new collection: aCollectionOfValues)
]

{ #category : #'api - accessing' }
BrUngroupedList >> itemsProvider: aBrAbstractListItemsProvider [
	self viewModel itemsProvider: aBrAbstractListItemsProvider
]

{ #category : #'api - scrolling' }
BrUngroupedList >> scrollToItem: anObject [
	"Request a scrollable widget to scroll to a given item"
	<return: #TAsyncPromise>
		
	^ self scrollToItemSuchThat: [ :eachItem | eachItem = anObject ]
]

{ #category : #'api - scrolling' }
BrUngroupedList >> scrollToItemSuchThat: aBlock [
	<return: #TAsyncPromise>

	| aPromise |
	aPromise := (self viewModel itemsProvider preloadUntilFoundSuchThat: aBlock)
		then: [ :anItemIndex | self enqueueTask: (BlTaskAction new
			action: [ self scrollToIndex: anItemIndex ]).
			anItemIndex ].
	
	self enqueueTask: (BlPromiseTask new promise: aPromise).
	
	^ aPromise
]

{ #category : #'api - scrolling' }
BrUngroupedList >> scrollToItemSuchThat: aBlock offset: anOffset [
	"Scroll the InfiniteELement to make the datasource position visible 
	with the given offset from resolved layout start.
	See {{gtMethod:BlInfiniteLinearLayout>>#scrollToPosition:offset:}}"
	<return: #TAsyncPromise>

	| aPromise |
	aPromise := (self viewModel itemsProvider preloadUntilFoundSuchThat: aBlock)
		then: [ :anItemIndex | self enqueueTask: (BlTaskAction new
			action: [ self scrollToIndex: anItemIndex offset: anOffset ]).
			anItemIndex ].
	
	self enqueueTask: (BlPromiseTask new promise: aPromise).
	
	^ aPromise
]

{ #category : #'api - accessing' }
BrUngroupedList >> stream: anAsyncStream [
	(self viewModel itemsProvider isKindOf: BrStreamItemsProvider)
		ifTrue: [ self viewModel itemsProvider stream: anAsyncStream ]
		ifFalse: [ self itemsProvider: (BrStreamItemsProvider new stream: anAsyncStream) ]
]
